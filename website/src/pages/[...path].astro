---
import Debug from 'astro/debug';
import deepmerge from 'deepmerge';
import { visitParents } from "unist-util-visit-parents";
// import { store, populateStore } from '@services/notionOne.js'
import { notionHelpers, deepMergeProps } from "@utils";
import * as layouts from '@layouts'
import pokoComponents from '../components/components.jsx'
import { toMdx } from '@services/notion.mjs'
import poko from '@poko'

const { MDXPage, AstroPage } = layouts

export async function getStaticPaths() {
  // const filePath = "src/_data/poko.json";
  // const systemPath = `${process.cwd()}/${filePath}`;

  // const poko = await import(systemPath)
  const { settings: _settings, pages: _pages, files, paths, websiteTree } = poko

  // TODO: loop recursively on tree instead of computing parent pages multiple times

  const { MDXContent: MDXContentSettings, exports: exportsSettings } = await toMdx(_settings.data.md)
  const propsSettings = deepMergeProps([{..._settings.data.props}, exportsSettings])
  const settings = { ..._settings, data: { ..._settings.data, MDXContent: MDXContentSettings, props: propsSettings } }

  const pages = await Promise.all(_pages.map(async p => {
    const { MDXContent, exports: exportsPage } = await toMdx(p.data.md)
    const propsPage = deepMergeProps([{...p.data?.props}, exportsPage])
    // Don't do this map if you want only the exports of the curent page (not inherit from parent pages and settings)
    const propsParents = await Promise.all(p?.parents?.map(async parent => {
      const { exports: exportsParent } = await toMdx(parent.data.md)
      const propsParent = deepMergeProps([{...parent.data?.props}, exportsParent])
      return propsParent
    })) || []
    const props = deepMergeProps([...propsParents, propsPage])
    return { ...p, data: { ...p.data, MDXContent, props } }
  }))

  return pages.map(page => {
    // console.log(page.data.path)
    return { params: { path: page.data.path === '' ? undefined : page.data.path }, props: { settings, pages, page, files, paths, websiteTree } }
  })

  // return [{ params: { path: undefined }, props: {  } }]
}


const { settings, pages, page, files, paths, websiteTree } = Astro.props;
const markdownRenderer = page?.data?.props?.markdownRenderer?.toLowerCase() || 'mdx'

---

{markdownRenderer === 'mdx' && <MDXPage  {...Astro.props} />}
{markdownRenderer === 'astro' && <AstroPage  {...Astro.props} />}


